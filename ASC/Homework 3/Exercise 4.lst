     1                                  ; (a*a+b/c-1)/(b+c)+d-x; a-word; b-byte; c-word; d-doubleword; x-qword
     2                                  ; Signed representation
     3                                  
     4                                  bits 32
     5                                  
     6                                  global start
     7                                  
     8                                  extern exit
     9                                  import exit msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 0E00                        a dw 14
    13 00000002 1D                          b db 29
    14 00000003 0200                        c dw 2
    15 00000005 66000000                    d dd 102
    16 00000009 1000000000000000            x dq 16
    17                                      
    18                                      
    19                                  segment code use32 class=code
    20                                      start:
    21                                          
    22 00000000 31C0                            xor eax, eax  ; eax = 0
    23 00000002 66A1[00000000]                  mov ax, [a]   ; ax = a
    24 00000008 66F72D[00000000]                imul word [a] ; dx:ax = a*a 
    25 0000000F 6689D1                          mov cx, dx
    26 00000012 6689C3                          mov bx, ax    ; cx:bx = a*a
    27                                          
    28 00000015 B800000000                      mov eax, 0    ; eax = 0
    29 0000001A A0[02000000]                    mov al, [b]   ; al = b
    30 0000001F 6698                            cbw           ; ax = b
    31 00000021 6699                            cwd           ; dx:ax = b
    32 00000023 66F73D[03000000]                idiv word [c] ; ax = b/c
    33                                          
    34 0000002A 6601C3                          add bx, ax
    35 0000002D 6683D100                        adc cx, 0     ; cx:bx = a*a + b/c
    36 00000031 6683EB01                        sub bx, 1     
    37 00000035 6683D900                        sbb cx, 0     ; cx:bx = a*a + b/c - 1
    38                                          
    39 00000039 A0[02000000]                    mov al, [b]   ; al = b,
    40 0000003E 6698                            cbw           ; ax = b
    41 00000040 660305[03000000]                add ax, [c]   ; ax = b + c
    42                                          
    43 00000047 6689CA                          mov dx, cx    ; dx:bx = a*a + b/c - 1
    44 0000004A 6689C1                          mov cx, ax    ; cx = b + c
    45 0000004D 6689D8                          mov ax, bx    ; dx:ax = a*a + b/c - 1
    46                                          
    47 00000050 66F7F9                          idiv cx       ; ax = (a*a + b/c - 1)/(b + c)
    48                                          
    49 00000053 BA00000000                      mov edx, 0    ; edx = 0
    50 00000058 0305[05000000]                  add eax, [d]  
    51 0000005E 83D200                          adc edx, 0    ; edx:eax = (a*a + b/c - 1)/(b + c) + d
    52                                          
    53 00000061 2B05[09000000]                  sub eax, [x]
    54 00000067 1B15[0B000000]                  sbb edx, [x+2]; edx:eax = (a*a + b/c - 1)/(b + c) + d - x
    55                                          
    56 0000006D 6A00                            push    dword 0
    57 0000006F FF15[00000000]                  call    [exit]
