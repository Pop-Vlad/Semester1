     1                                  
     2                                  ; Being given two alphabetical ordered strings of characters, s1 and s2, build using merge sort the ordered string of bytes that contain all characters from s1 and s2.
     3                                  
     4                                  bits 32
     5                                  
     6                                  global start
     7                                  
     8                                  extern exit
     9                                  import exit msvcrt.dll
    10                                  
    11                                  segment data use32 class = data
    12 00000000 6162646567696D78            s1 db "abdegimx"          ; s1 = abdegimx
    13 00000008 08000000                    len1 dd $-s1              ; len1 = 8
    14 0000000C 636466686A6F72              s2 db "cdfhjor"            ; s2 = cfhjor
    15 00000013 07000000                    len2 dd $-s2              ; len2 = 6
    16 00000017 <res 0000001B>              result resb len1 + len2   ; reserve 14 bytes for result
    17                                      
    18                                  segment code use32 class = code
    19                                      start:
    20                                          
    21 00000000 B900000000                      mov ecx, 0        ; ecx = 0
    22 00000005 BA00000000                      mov edx, 0        ; edx = 0
    23 0000000A BF[17000000]                    mov edi, result   ; edi = 0
    24                                          
    25                                          ; ---------- Step 1 ----------
    26                                          ; Choose the character from the 2 strings and move it to destination, until one string has no characters left
    27                                          
    28                                          step1:
    29                                              
    30 0000000F 833D[08000000]00                    cmp dword [len1], 0
    31 00000016 742F                                je step2.a           ; if len1 == 0, go to step2.a
    32 00000018 833D[13000000]00                    cmp dword [len2], 0
    33 0000001F 7441                                je step2.b           ; if len2 == 0, go to step 2.b
    34 00000021 8A81[00000000]                      mov al, [s1 + ecx]   ; al = the character on position ecx of s1
    35 00000027 8A9A[0C000000]                      mov bl, [s2 + edx]   ; bl = the character on position edx of s2
    36 0000002D 38D8                                cmp al, bl
    37 0000002F 770A                                ja from_s2           ; if s1 > s2 go to from_s2 
    38                                              
    39                                              ; Take a character from s1 and move it to result
    40                                              
    41                                              from_s1:
    42 00000031 AA                                      stosb              ; append al to result
    43 00000032 41                                      inc ecx            ; ecx = ecx + 1
    44 00000033 FF0D[08000000]                          dec dword [len1]   ; len1 = len1 -1
    45 00000039 EBD4                                    jmp step1          ; return to step1
    46                                              
    47                                              ; Take a character from s2 and move it to result
    48                                              
    49                                              from_s2:
    50 0000003B 88D8                                    mov al, bl         ; al =bl
    51 0000003D AA                                      stosb              ; append al to result
    52 0000003E 42                                      inc edx            ; edx =edx + 1
    53 0000003F FF0D[13000000]                          dec dword [len2]   ; len2 = len2 - 1
    54 00000045 EBC8                                    jmp step1          ; return to step1
    55                                          
    56                                          ; ---------- Step 2 ----------
    57                                          ; Append the remaining string to the destination
    58                                          
    59                                              ; Append the remaining part from s2
    60                                              
    61                                              step2.a:
    62 00000047 833D[13000000]00                        cmp dword [len2], 0
    63 0000004E 0F84(00000000)                          je exit               ; if len2 == 0 go to exit
    64 00000054 8A82[0C000000]                          mov al, [s2 + edx]    ; al = the character on position edx of s2
    65 0000005A AA                                      stosb                 ; append al to result
    66 0000005B 42                                      inc edx               ; edx = edx + 1
    67 0000005C FF0D[13000000]                          dec dword [len2]      ; len2 = len2 - 1
    68                                              
    69                                              ; Append the remaining part from s1
    70                                              
    71                                              step2.b:
    72 00000062 833D[08000000]00                        cmp dword [len1], 0
    73 00000069 0F84(00000000)                          je exit               ; if len1 == 0 go to exit
    74 0000006F 8A81[00000000]                          mov al, [s1 + ecx]    ; al = the character on position ecx of s1
    75 00000075 AA                                      stosb                 ; append al to result 
    76 00000076 41                                      inc ecx               ; ecx = ecx + 1
    77 00000077 FF0D[08000000]                          dec dword [len1]      ; len1 = len1 - 1
    78                                          
    79 0000007D 6A00                            push dword 0
    80 0000007F FF15[00000000]                  call [exit]
