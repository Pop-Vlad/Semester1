     1                                  ; a - byte, b - word, c - double word, d - qword - Signed representation
     2                                  ; (c-d-a)+(b+b)-(c+a)
     3                                  
     4                                  bits 32
     5                                  
     6                                  global start
     7                                  
     8                                  extern exit
     9                                  import exit msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 1C                          a db 28
    13 00000001 5200                        b dw 82
    14 00000003 0C000000                    c dd 12
    15 00000007 7B00000000000000            d dq 123
    16                                      
    17                                      
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 31C0                            xor eax, eax   ; eax = 0
    21 00000002 31D2                            xor edx, edx   ; edx = 0
    22 00000004 31DB                            xor ebx, ebx   ; ebx= 0
    23 00000006 31C9                            xor ecx, ecx   ; ecx = 0
    24                                          
    25 00000008 8B1D[03000000]                  mov ebx, [c]   ; ebx = c
    26                                          
    27 0000000E A0[00000000]                    mov al, [a]    ; al = a
    28 00000013 6698                            cbw            ; ax = a
    29 00000015 6699                            cwd            ; dx:ax = a
    30 00000017 6652                            push dx
    31 00000019 6650                            push ax
    32 0000001B 58                              pop eax        ; eax = a
    33                                          
    34 0000001C 29C3                            sub ebx, eax   ; ebx = c - a
    35 0000001E 83D900                          sbb ecx, 0     ; ecx:ebx = c - a
    36                                          
    37 00000021 2B1D[07000000]                  sub ebx, [d]
    38 00000027 1B0D[09000000]                  sbb ecx, [d+2] ; ecx:ebx = c - d - a
    39                                          
    40 0000002D 31C0                            xor eax, eax   ; eax = 0
    41 0000002F 66A1[01000000]                  mov ax, [b]    ; ax = b
    42 00000035 6699                            cwd            ; dx:ax = b
    43 00000037 6652                            push dx
    44 00000039 6650                            push ax
    45 0000003B 58                              pop eax        ; eax = b
    46                                          
    47 0000003C 01C0                            add eax, eax   ; eax = b + b
    48 0000003E 01C3                            add ebx, eax
    49 00000040 83D100                          adc ecx, 0     ; ecx:ebx = (c - d - a) + (b + b)
    50                                          
    51 00000043 A0[00000000]                    mov al, [a]    ; al = a
    52 00000048 6698                            cbw            ; ax = a
    53 0000004A 6699                            cwd            ; dx:ax = a
    54 0000004C 6652                            push dx
    55 0000004E 6650                            push ax
    56 00000050 58                              pop eax        ; eax = a
    57                                          
    58 00000051 0305[03000000]                  add eax, [c]   ; eax = a + c
    59 00000057 83D900                          sbb ecx, 0     ; subtreact carry from minuend in case of overflow
    60 0000005A 29C3                            sub ebx, eax
    61 0000005C 83D900                          sbb ecx, 0     ; ecx:ebx = (c - d - a) + (b + b) - (c + a)
    62                                          
    63 0000005F 6A00                            push    dword 0
    64 00000061 FF15[00000000]                  call    [exit]
